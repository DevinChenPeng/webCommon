(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0db0d4"],{"6de5":function(a,t,s){"use strict";s.r(t);var e=function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",[s("el-card",{staticClass:"box-card"},[s("div",{attrs:{slot:"header"},slot:"header"},[s("p",{staticClass:"title"},[a._v("默认开关")]),s("p",{staticClass:"hide"},[a._v(" 在很多时候，当我们点击一个开关需要弹出一个二次确认框点击确定的时候才去改变他的状态，但是element提供的按钮是点击过后就会将切换状态，这里组件就对这种情况进行了处理。 ")]),s("p",{staticClass:"hide"},[s("a",{staticStyle:{color:"#0091ff"},attrs:{href:"#Attributes"}},[a._v("更多详情>>")])])]),s("div",{staticClass:"template"},[s("CcSwitch",{on:{change:a.changeValue},model:{value:a.data,callback:function(t){a.data=t},expression:"data"}})],1),s("Code",[s("div",{domProps:{innerHTML:a._s(a.codeData.code)}})])],1),s("el-card",{staticClass:"box-card"},[s("div",{attrs:{slot:"header"},slot:"header"},[s("p",{staticClass:"title"},[a._v("打开二次弹框（状态异步更新）")]),s("p",{staticClass:"hide"},[a._v("设置"),s("code",[a._v("openMessageBox")]),a._v("属性，默认内嵌了二次弹框，"),s("code",[a._v("confirmFun")]),a._v("是点击确认的回调函数，"),s("code",[a._v("cancelFun")]),a._v("是点击取消的函数。")]),s("p",{staticClass:"hide"},[a._v("用户点击这个 "),s("code",[a._v("Switch")]),a._v(" 组件后，会发送一个请求。请求获得正确结果后，再切换 "),s("code",[a._v("Switch")]),a._v(" 组件的状态。")]),s("p",{staticClass:"hide"},[a._v(" 这里提供了两种处理方式： "),s("ul",[s("li",[a._v("第一种：组件内部处理接口逻辑，只需传入接口请求地址"),s("code",[a._v("url")]),a._v("，接口请求方式"),s("code",[a._v("method")]),a._v("，请求参数"),s("code",[a._v("params")]),a._v("。当然如果你传递了"),s("code",[a._v("confirmFun")]),a._v("最后也会抛出"),s("code",[a._v("confirmFun")]),a._v("回调函数。")]),s("li",[a._v("第二种：当没传递url参数是，当点击确定会抛出一个"),s("code",[a._v("confirmFun")]),a._v("函数。")])])]),s("p",{staticClass:"hide"},[s("a",{staticStyle:{color:"#0091ff"},attrs:{href:"#Attributes"}},[a._v("更多详情>>")])])]),s("div",{staticClass:"template"},[s("CcSwitch",{attrs:{openMessageBox:"",url:"/change/switch",params:{name:0},confirmFun:a.confirmFun},model:{value:a.data1,callback:function(t){a.data1=t},expression:"data1"}})],1),s("Code",[s("div",{domProps:{innerHTML:a._s(a.codeData.code1)}})])],1),s("el-card",{staticClass:"box-card"},[s("div",{attrs:{slot:"header"},slot:"header"},[s("p",{staticClass:"title"},[a._v("禁用开关")]),s("p",{staticClass:"hide"},[a._v("设置开关属性为"),s("code",[a._v("disabled")]),a._v("。")]),s("p",{staticClass:"hide"},[s("a",{staticStyle:{color:"#0091ff"},attrs:{href:"#Attributes"}},[a._v("更多详情>>")])])]),s("div",{staticClass:"template"},[s("CcSwitch",{attrs:{openMessageBox:"",disabled:!0},model:{value:a.data2,callback:function(t){a.data2=t},expression:"data2"}})],1),s("Code",[s("div",{domProps:{innerHTML:a._s(a.codeData.code2)}})])],1),s("el-card",{staticClass:"box-card"},[s("div",{attrs:{slot:"header"},slot:"header"},[s("p",{staticClass:"title"},[a._v("参数详情")]),s("p",{staticClass:"hide"},[a._v("本文档只列举对element-ui属性进行修改过的值。")]),s("p",{staticClass:"hide"},[s("a",{attrs:{href:"https://element.eleme.cn/#/zh-CN/component",target:"blank"}},[a._v("更多属性请移步element-ui官网")])])]),s("div",{staticClass:"template"},[s("ParamsTable",{staticStyle:{"margin-bottom":"20px"},attrs:{tableData:a.tableData,title:"Attributes"}}),s("MethodsTable",{attrs:{tableData:a.tableData1,title:"Methods"}})],1)])],1)},n=[],l=s("fb4e"),c={code:'<pre class="language-markup" contenteditable="false" data-mce-selected="1"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CcSwitch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span></pre>',code1:'<pre class=" language-markup" contenteditable="false" data-mce-selected="1"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CcSwitch</span>\n  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span>\n  <span class="token attr-name">openMessageBox</span>\n  <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/change/switch<span class="token punctuation">"</span></span>\n  <span class="token attr-name">:params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ name: 0 }<span class="token punctuation">"</span></span>\n  <span class="token attr-name">:confirmFun</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>confirmFun<span class="token punctuation">"</span></span>\n<span class="token punctuation">/&gt;</span></span></pre>',code2:'<pre class="language-markup" contenteditable="false"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CcSwitch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token attr-name">openMessageBox</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></pre>'},p={components:{Code:l["a"]},data:function(){return{data:1,data1:2,data2:1,tableData:[{params:"confirm-fun",explain:"点击确认按钮时的回调函数，参数是当前状态的值",type:"function",value:"",default:""},{params:"cancel-fun",explain:"点击取消按钮时的回调函数，参数是当前状态的值",type:"function",value:"",default:""},{params:"open-message-box",explain:"是否开启二次确认弹框模式",type:"boolean",value:"true / false",default:"是否停用？"},{params:"active-message",explain:"开启时的弹框提示语，仅当<code>openMessageBox='true'</code>时生效",type:"string",value:"",default:"是否启用？"},{params:"inActive-message",explain:"关闭时的弹框提示语，仅当<code>openMessageBox='true'</code>时生效",type:"string",value:"",default:"是否停用？"},{params:"url",explain:"请求接口的地址，仅当<code>openMessageBox='true'</code>时生效",type:"string",value:"",default:""},{params:"params",explain:"请求参数，默认会添加一个属性是当前开关绑定的属性值",type:"Object",value:"",default:"{ }"},{params:"method",explain:"接口请求的方式",type:"string",value:"get / post / delete / put",default:"post"},{params:"field",explain:"绑定参数的key",type:"string",value:"",default:"status"},{params:"is-loading",explain:"是否开启loading，仅当<code>openMessageBox='true'</code>时生效",type:"string",value:"true / false",default:"true"},{params:"disabled",explain:"是否禁用开关",type:"boolean",value:"true / false",default:"false"}],tableData1:[{params:"changeValue",explain:"当数据改变时，触发的函数",value:""}]}},methods:{confirmFun:function(a){this.data1=a},changeValue:function(a){console.log(a)}},computed:{codeData:function(){return c}}},o=p,i=s("2877"),u=Object(i["a"])(o,e,n,!1,null,null,null);t["default"]=u.exports}}]);
//# sourceMappingURL=chunk-2d0db0d4.ae640d9b.js.map